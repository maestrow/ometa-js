expr = 
group = '(' expr ')' | 
alt = group '|' group
seq = group spaces group
quant = many | 
many = group '*'



a (b c) | (x* y)* z (w|e)*


letter = 
digit = 

simple = letter | digit

quant = ('(' expr ')' | simple) '*'

group = '(' expr ')' | quant

seq

alt


ometa Ometa {
  programm = "ometa" ident "{" rule* "}",
  rule = ident "=" "|"? expr spaces* ',' newline,

  eToken = '"' (~'"')* '"',
  eString = '\'' (~'\'')* '\'',

  eSimple = eString | eToken,
  eProj = expr '->' jsExpr,
  eNot = '~' (eGroup | eSimple),
  eQuant = (eGroup | eNot | eSimple) ('*'|'+'|'?'),
  
  eSeq = (eGroup | eQuant) (spaces (eGroup | eQuant))*,
  eAlt = eSeq ('|' eSeq)*,
  
  eGroup = '(' expr ')'
  expr = eAlt,

  jsExpr = ~(',' '\n')*

  ident = letter (alphanum | '_')*,
  spaces
  newline
}


top = alt
alt = seq | seq
seq = (group | expr) ' ' (group | expr)

expr = quant | not | proj

quant = a*
not = ~a
proj = a -> b

eGroup = '(' top ')'

simple = token | str

token = ".."
str = '..'


